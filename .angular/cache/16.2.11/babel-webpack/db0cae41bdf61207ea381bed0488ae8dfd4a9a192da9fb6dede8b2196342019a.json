{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mertc/OneDrive/Masa\\xFCst\\xFC/KODLAMA/angular/project1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _this = this;\nimport * as i0 from \"@angular/core\";\nclass ApiService {\n  static #_ = this.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ApiService };\n//   constructor(private http: HttpClient) {  }\n//   getApiData(cityName:string): Observable<any> {\n//     const url = `https://api.weatherbit.io/v2.0/current?city=ankara&key=c422a71defdf4c9aa59f8e35ecffa133`;\n//     return this.http.get(url);\n//   }\n// }\n// API'ye erişmek için fetch metodunu kullanma\nfunction getData(_x) {\n  return _getData.apply(this, arguments);\n} // API'den gelen verileri ayrıştırmak ve istediğiniz şekilde işlemek için bir fonksiyon oluşturma\nfunction _getData() {\n  _getData = _asyncToGenerator(function* (url) {\n    const response = yield fetch(url);\n    const data = yield response.json();\n    return data;\n  });\n  return _getData.apply(this, arguments);\n}\nfunction processData(data) {\n  // API'den gelen verileri işlemek için kodları buraya ekleyin\n  console.log(data);\n}\n// Örnek kullanım\n_asyncToGenerator(function* () {\n  const url = `https://api.weatherbit.io/v2.0/current?city=${_this.cityName}&key=c422a71defdf4c9aa59f8e35ecffa133`;\n  const data = yield getData(url);\n  processData(data);\n})();","map":{"version":3,"names":["ApiService","_","_2","factory","ɵfac","providedIn","getData","_x","_getData","apply","arguments","_asyncToGenerator","url","response","fetch","data","json","processData","console","log","_this","cityName"],"sources":["C:\\Users\\mertc\\OneDrive\\Masaüstü\\KODLAMA\\angular\\project1\\src\\app\\weather\\ApiService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { WeatherComponent } from './weather.component';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  \r\n\r\n//   constructor(private http: HttpClient) {  }\r\n  \r\n\r\n//   getApiData(cityName:string): Observable<any> {\r\n//     const url = `https://api.weatherbit.io/v2.0/current?city=ankara&key=c422a71defdf4c9aa59f8e35ecffa133`;\r\n//     return this.http.get(url);\r\n    \r\n//   }\r\n// }\r\n// API'ye erişmek için fetch metodunu kullanma\r\nasync function getData(url) {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\n// API'den gelen verileri ayrıştırmak ve istediğiniz şekilde işlemek için bir fonksiyon oluşturma\r\nfunction processData(data) {\r\n  // API'den gelen verileri işlemek için kodları buraya ekleyin\r\n  console.log(data);\r\n}\r\n\r\n// Örnek kullanım\r\n(async () => {\r\n  const url = `https://api.weatherbit.io/v2.0/current?city=${this.cityName}&key=c422a71defdf4c9aa59f8e35ecffa133`;\r\n  const data = await getData(url);\r\n  processData(data);\r\n})();"],"mappings":";;;AAMA,MAGaA,UAAU;EAAA,QAAAC,CAAA,G;qBAAVD,UAAU;EAAA;EAAA,QAAAE,EAAA,G;WAAVF,UAAU;IAAAG,OAAA,EAAVH,UAAU,CAAAI,IAAA;IAAAC,UAAA,EAFT;EAAM;;SAEPL,UAAU;AAGvB;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA,SACeM,OAAOA,CAAAC,EAAA;EAAA,OAAAC,QAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA,EAMtB;AAAA,SAAAF,SAAA;EAAAA,QAAA,GAAAG,iBAAA,CANA,WAAuBC,GAAG;IACxB,MAAMC,QAAQ,SAASC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,IAAI,SAASF,QAAQ,CAACG,IAAI,EAAE;IAClC,OAAOD,IAAI;EACb,CAAC;EAAA,OAAAP,QAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,SAASO,WAAWA,CAACF,IAAI;EACvB;EACAG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;AACnB;AAEA;AACAJ,iBAAA,CAAC,aAAW;EACV,MAAMC,GAAG,GAAG,+CAA+CQ,KAAI,CAACC,QAAQ,uCAAuC;EAC/G,MAAMN,IAAI,SAAST,OAAO,CAACM,GAAG,CAAC;EAC/BK,WAAW,CAACF,IAAI,CAAC;AACnB,CAAC,EAAC,CAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}